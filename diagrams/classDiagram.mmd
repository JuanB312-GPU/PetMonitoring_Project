classDiagram
    %% Core Domain Models
    class User {
        +int user_id
        +String name
        +String email
        +String phone_number
        +String password_hash
        +password_to_hash(password)
        +verify_password(password) bool
    }

    class Pet {
        +int pet_id
        +String name
        +Numeric age
        +Numeric height
        +Numeric weight
        +Date date_of_birth
        +int breed_id
        +int species_id
        +int user_id
        +calculate_age(birthdate) int
    }

    class Species {
        +int species_id
        +String name
    }

    class Breed {
        +int breed_id
        +int species_id
        +String name
    }

    class Medical_condition {
        +int mc_id
        +String name
        +String description
        +String recommendations
    }

    class Vaccine {
        +int vaccine_id
        +String name
        +Numeric recommended_age
    }

    class Activity {
        +int activity_id
        +String name
        +String description
    }

    class Feeding {
        +int feeding_id
        +String name
        +String description
        +Numeric calories
    }

    %% Junction Tables
    class Pet_medical_condition {
        +int pet_id
        +int mc_id
    }

    class Pet_vaccine {
        +int pet_id
        +int vaccine_id
    }

    class Pet_activity {
        +int pet_id
        +int activity_id
        +int weekly_frequency_activity
    }

    class Pet_feeding {
        +int pet_id
        +int feeding_id
        +int daily_meal_frequency
    }

    class Pet_history {
        +int hr_id
        +int pet_id
        +Date date
        +Numeric body_metric
    }

    %% Repository Layer
    class UserRepository {
        <<Repository>>
        +get_by_name(db, name) User
        +get_by_email(db, email) User
        +get_by_phone(db, phone) User
        +create_user(db, user) User
        +create(db, user) User
        +get_user_by_id(db, user_id) User
    }

    class PetRepository {
        <<Repository>>
        +create(db, pet) Pet
        +get_user_pets(db, user_id) List
        +get_pet_by_name_user(db, name, user_id) Pet
        +get_species(db) List
        +get_species_by_id(db, species_id) Species
        +get_breeds_by_species(db, species_id) List
        +get_breed_by_id(db, breed_id) Breed
        +create_pet(db, pet) Pet
        +get_pet_by_id(db, pet_id) Pet
    }

    class MedicalRepository {
        <<Repository>>
        +get_medical_conditions(db) List
        +get_vaccines(db) List
        +get_condition_by_id(db, condition_id) Medical_condition
        +get_vaccine_by_id(db, vaccine_id) Vaccine
        +get_conditions_by_pet(db, pet_id) List
        +get_vaccines_by_pet(db, pet_id) List
        +get_species(db) List
        +get_breeds_by_species(db, species_id) List
        +get_species_by_id(db, species_id) Species
        +get_breed_by_id(db, breed_id) Breed
        +create_pet_medical_condition(db, pet_condition) bool
        +create_pet_vaccine(db, pet_vaccine) bool
    }

    class ActivityRepository {
        <<Repository>>
        +get_activities(db) List
        +get_feedings(db) List
        +get_activity_by_id(db, activity_id) Activity
        +get_activities_by_pet(db, pet_id) List
        +get_feeding_by_id(db, feeding_id) Feeding
        +get_feedings_by_pet(db, pet_id) List
        +create_pet_activity(db, pet_activity) bool
        +create_pet_feeding(db, pet_feeding) bool
    }

    class ReportRepository {
        <<Repository>>
        +create_pet_history(db, pet_history) bool
        +get_pet_reports_for_user(db, user_id) List
        +get_pet_history_by_id(db, history_id) Pet_history
        +get_pet_history_by_pet(db, pet_id) List
    }

    %% Service Layer
    class UserService {
        <<Service>>
        +create_user(db, user_data) User
        +login_user(db, user_data) User
        +get_user_by_email(db, email) User
        +get_user_by_id(db, user_id) User
    }

    class PetService {
        <<Service>>
        +create_pet(db, pet_data) Pet
        +get_user_pets(db, user_id) List
        +get_pet_by_id(db, pet_id) Pet
        +get_species(db) List
        +get_breeds_by_species(db, species_id) List
    }

    class MedicalService {
        <<Service>>
        +get_species(db) List
        +get_breeds_by_species(db, species_id) List
        +get_medical_conditions(db) List
        +get_vaccines(db) List
        +create_pet_medical_condition(db, pet_id, condition_id) bool
        +create_pet_vaccine(db, pet_id, vaccine_id) bool
    }

    class ActivityService {
        <<Service>>
        +create_pet_activity(db, activity_data) bool
        +create_pet_feeding(db, feeding_data) bool
        +get_activities_by_pet(db, pet_id) List
        +get_feedings_by_pet(db, pet_id) List
        +get_all_activities(db) List
        +get_all_feedings(db) List
    }

    class ReportService {
        <<Service>>
        +create_report(db, report_data) bool
        +get_pet_reports_for_user(db, user_id) List
        +generate_health_report(db, pet_id) dict
    }

    %% Frontend Components
    class App {
        <<Frontend>>
        +loadUserPets()
        +renderUserPets(pets)
        +logout()
        +showGuestContent()
        +showUserContent(userData)
        +initializeApp()
        +handlePageNavigation(page)
    }

    class Auth {
        <<Frontend>>
        +showAuthModal(mode)
        +hideAuthModal()
        +handleLogin(form)
        +handleRegister(form)
        +bindEvents()
        +validateForm(formData) bool
        +storeAuthToken(token)
        +removeAuthToken()
    }

    class Navbar {
        <<Frontend>>
        +updateAuthState(userData)
        +loadUserPets()
        +updatePetSelector()
        +selectPet(petId)
        +navigateTo(page)
        +showUserMenu()
        +hideUserMenu()
    }

    class PetComponent {
        <<Frontend>>
        +showPetModal()
        +hidePetModal()
        +handlePetRegistration(form)
        +createPetCard(pet)
        +showActivityModal(petId)
        +showFoodModal(petId)
        +handleActivityAdd(form)
        +handleFoodAdd(form)
        +loadMedicalConditions()
        +loadVaccines()
        +loadSpecies()
        +loadActivities()
        +loadFeedings()
        +validatePetForm(formData) bool
        +renderPetDetails(pet)
    }

    class Dashboard {
        <<Frontend>>
        +updateDashboard(pet)
        +calculateBMI(pet)
        +calculateBCS(pet)
        +calculateMER(pet)
        +calculateDiseaseRisk(pet)
        +updateMetrics(pet)
        +renderHealthMetrics(metrics)
        +showHealthAlerts(alerts)
    }

    class Reports {
        <<Frontend>>
        +loadReports()
        +renderReports()
        +generateSampleReports()
        +createReportCard(report)
        +downloadReport(reportId)
        +filterReports(criteria)
        +exportReport(reportId, format)
    }

    %% Schema Classes
    class UserCreate {
        <<Schema>>
        +String name
        +String email
        +String phone
        +String password
        +String confirmPassword
    }

    class UserOut {
        <<Schema>>
        +int user_id
        +String name
        +String email
        +String phone_number
    }

    class UserLogin {
        <<Schema>>
        +String email
        +String password
    }

    class PetCreate {
        <<Schema>>
        +String name
        +int user_id
        +int species
        +int breed
        +Date birthdate
        +float height
        +float weight
        +List conditions
        +List vaccines
    }

    class PetOut {
        <<Schema>>
        +int id
        +String name
        +String species
        +String breed
        +Date birthdate
        +float height
        +float weight
        +List conditions
        +List vaccines
    }

    class ActivityCreate {
        <<Schema>>
        +int pet_id
        +int activity_id
        +int frequency
    }

    class FeedingCreate {
        <<Schema>>
        +int pet_id
        +int feeding_id
        +int frequency
    }

    class PetHistory {
        <<Schema>>
        +int petId
        +float bmiStatus
        +Date date
    }

    %% Utility Classes
    class HealthMetrics {
        <<Utility>>
        +calculate_age(birthdate) int
        +calculate_bmi(weight, height) float
        +calculate_health_metrics(pet_data) dict
    }

    class AuthUtils {
        <<Utility>>
        +hash_password(password) String
        +verify_password(password, hashed) bool
    }

    %% Database Relationships (Entity relationships with cardinality)
    User "1" *-- "0..*" Pet : owns
    Species "1" --> "0..*" Breed : categorizes
    Species "1" --> "0..*" Pet : classifies
    Breed "1" --> "0..*" Pet : defines
    Pet "1" *-- "0..*" Pet_medical_condition : has
    Pet "1" *-- "0..*" Pet_vaccine : receives
    Pet "1" *-- "0..*" Pet_activity : performs
    Pet "1" *-- "0..*" Pet_feeding : follows
    Pet "1" *-- "0..*" Pet_history : records
    Medical_condition "1" --> "0..*" Pet_medical_condition : affects
    Vaccine "1" --> "0..*" Pet_vaccine : protects
    Activity "1" --> "0..*" Pet_activity : defines
    Feeding "1" --> "0..*" Pet_feeding : specifies

    %% Service-Repository Dependencies (Dependency relationships)
    UserService ..> UserRepository : uses
    PetService ..> PetRepository : uses
    MedicalService ..> MedicalRepository : uses
    ActivityService ..> ActivityRepository : uses
    ReportService ..> ReportRepository : uses

    %% Frontend-Backend Dependencies (Dependency relationships)
    Auth ..> UserService : calls
    PetComponent ..> PetService : calls
    PetComponent ..> MedicalService : calls
    PetComponent ..> ActivityService : calls
    Dashboard o-- PetComponent : aggregates
    Reports ..> ReportService : calls
    Navbar o-- PetComponent : aggregates
    App *-- Auth : contains
    App *-- Navbar : contains
    App *-- PetComponent : contains
    App *-- Dashboard : contains
    App *-- Reports : contains

    %% Schema Usage (Dependency relationships)
    Auth ..> UserCreate : uses
    Auth ..> UserLogin : uses
    Auth ..> UserOut : uses
    PetComponent ..> PetCreate : uses
    PetComponent ..> PetOut : uses
    PetComponent ..> ActivityCreate : uses
    PetComponent ..> FeedingCreate : uses
    Reports ..> PetHistory : uses
    UserService ..> UserCreate : processes
    UserService ..> UserLogin : validates
    UserService ..> UserOut : returns
    PetService ..> PetCreate : processes
    PetService ..> PetOut : returns
    ActivityService ..> ActivityCreate : processes
    ActivityService ..> FeedingCreate : processes
    ReportService ..> PetHistory : processes

    %% Utility Usage (Dependency relationships)
    Dashboard ..> HealthMetrics : calculates
    Auth ..> AuthUtils : authenticates
    User ..> AuthUtils : validates
